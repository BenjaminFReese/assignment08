---
title: "Assignment 08"
author: "Benjamin Reese"
format: html
self-contained: true
---

### Packages
```{r packages, warning=FALSE,message=FALSE}
## Loading in Packages
library(readr)
library(tidyverse)
library(tidymodels)
library(patchwork)
library(factoextra)
library(broom)
library(tidytext)
library(lubridate)
library(SnowballC)
library(igraph)
library(ggraph)
library(stringr)
library(stopwords)
library(textrecipes)
```

## Exercise 01

### (a)

```{r loading and cleaning votes data, message=FALSE, warning=FALSE}
## Loading in  votes data
votes_time_series <- read_csv("data/votes_time_series.csv")
## Loading in states region data
states_regions <- read_csv("data/states_regions.csv")

## Replacing NAs with 0s
votes_103 <- votes_time_series %>%
  mutate_all(funs(ifelse(is.na(.), 0, .))) %>%
  filter(session==103) %>%
  left_join(states_regions, by = c("state" = "State Code"))


```

### (b)

```{r votes recipe, message=FALSE, warning=FALSE}
## Creating the Recipe for PCA
votes_pca_rec <-
  recipe(~., data = votes_103) %>%
  step_pca(starts_with("v")) %>%   
  prep()  # run prep to prepare recipe

```

### (c)

```{r votes variance, message=FALSE, warning=FALSE}
## Checking the percent variance for pc1
tidy(votes_pca_rec, number=1, type = "variance") %>%
  filter(terms == "percent variance", component == 1)

## Checking the cumulative percent variance for first five components
tidy(votes_pca_rec, number=1, type = "variance") %>%
  filter(terms == "cumulative percent variance", component <= 5)

```

The first principal component explains $\approx 38%$ of the variance. The first five principal components cumulatively explain $\approx 68%$ of the variance. Most of the variance is being explained in the first two principal components.

### (d)

```{r votes plots, message=FALSE, warning=FALSE}
## Party Plot
p1 <- votes_pca_rec %>%
  bake(new_data = votes_103) %>%
  ggplot(aes(x=PC1, y=PC2, color=party)) +
  geom_point() +
  scale_color_manual(values = c("D" = "blue", "R"= "red")) +
  theme_minimal() +
  labs(x="PC1", y= "PC2", title = "PC1 and PC2 of the 103rd Senate",
       subtitle = "Color by Party", color="Party")

## Region Plot
p2 <- votes_pca_rec %>%
  bake(new_data = NULL) %>%
  ggplot(aes(x=PC1, y=PC2, color=Region)) +
  geom_point() +
  theme_minimal() + 
  labs(x="PC1", y= "PC2", title = "PC1 and PC2 of the 103rd Senate",
       subtitle = "Color by Region", color="US Region")

## Displaying Plots
p1 + p2
```

## Exercise 02

### (a)

```{r creating votes numeric, message=FALSE, warning=FALSE}
## Filtering votes_103 to only include votes
votes_numeric <- votes_103 %>%
  select(starts_with("v"))
```

### (b)

```{r exercise2b, warning=FALSE, message=FALSE}
## Setting Seed
set.seed(20220412) 

## Creating recipe
kmeans_rec <- recipe(formula = ~ .,data = votes_numeric)

## Prepping and Baking
votes_numeric <- kmeans_rec %>%
   prep() %>%
   bake(new_data = votes_numeric)

## Silhouette Calculation
fviz_nbclust(votes_numeric, FUN = kmeans, method = "silhouette")

## Gap Statistic Calculation
fviz_nbclust(votes_numeric, FUN = kmeans, method = "gap_stat")

## WSS Calculation
fviz_nbclust(votes_numeric, FUN = kmeans, method = "wss")


```

### (c)

```{r creating k means function}
## Creating k-means function



```

### (d)

## Exercise 03

### (a)

```{r loading and cleaning exec orders, warning=FALSE,message=FALSE}
## Loading executive orders data
executive_orders <- read_csv("data/executive-orders.csv")

## Filtering out text NAs
exec_orders <- executive_orders %>%
  filter(!is.na(text))

## Creating bigrams
tidy_exec <- exec_orders %>%
  unnest_tokens(bigram, text, token = "ngrams", n = 2)%>%
  filter(!is.na(bigram))
```

### (b)

```{r exercise 3b}
## Separating, filtering, and counting bigrams
bigram_150 <- tidy_exec %>%
  separate(col = "bigram", into = c("word1", "word2")) %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word) %>%
  count(word1, word2, sort = TRUE) %>%
  slice(1:150)

# plot the bigrams that exist more than 150 times
bigram_graph <- bigram_150 %>%
  graph_from_data_frame()

# plot the relationships (you may want to make the plot window bigger)
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
  geom_edge_link() +
  geom_node_point() +
  geom_node_text(aes(label = name), vjust = 1, hjust = 1)
```

### (c)

```{r calculating tf_idf}
## Calculating tf_idf for each bigram-president pair
tf_idf <- tidy_exec %>%
  separate(col = "bigram", into = c("word1", "word2")) %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word) %>%
  mutate(bigrams = paste(word1, word2)) %>%
  count(president, bigrams, sort = TRUE) %>%
  bind_tf_idf(term = bigrams, document = president, n = n)

## Plotting bigram-president pair
tf_idf %>%
  group_by(president) %>%
  top_n(15, tf_idf) %>%
  mutate(bigrams = reorder(bigrams, tf_idf)) %>%
  ggplot(aes(tf_idf, bigrams, fill = president)) +
  geom_col() +
  facet_wrap(~president, scales = "free") +
  theme_minimal() +
  guides(fill = "none")

```


## Exercise 04

### (a)

```{r reading and cleaning senate votes, warning=FALSE, message=FALSE}
## Importing Senate bills data
bills <- read_csv("data/senate_bills_114.csv") %>%
  mutate(passed = factor(passed, labels = c("1", "0"), levels = c("1", "0")))
```

### (b)

```{r splitting bills data}
## Splitting into training and testing
bills <- bills %>%
  select(-bill_number)

## Splitting the Sample
split <- initial_split(bills, prop = 0.75, strata = "passed")

## Training and Testing
bills_train <- training(split)
bills_test <- testing(split)
```

### (c)

```{r creating bills recipe}
## Creating recipe
bills_rec <- recipe(passed~., data = bills_train) %>%
  step_tokenize(description) %>%
  step_stopwords(description) %>%
  step_stem(description) %>%
  step_tokenfilter(description) %>%
  step_tfidf(description)
```



